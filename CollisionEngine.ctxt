#BlueJ class context
comment0.target=CollisionEngine
comment0.text=\n\n\ @author\ R.\ Springer\n
comment1.params=tileEngine\ camera
comment1.target=CollisionEngine(TileEngine,\ Camera)
comment1.text=\n\ The\ constructor\ of\ the\ CollisionEngine.\n\n\ @param\ tileEngine\ The\ TileEngine\n\ @param\ camera\ The\ camera\n
comment10.params=actor
comment10.target=int\ getActorHalfHeigth(greenfoot.Actor)
comment10.text=\n\ Calculate\ the\ half\ hieght\ of\ a\ Actor\n\n\ @param\ actor\ An\ Actor\ class\ or\ an\ extend\ of\ it.\n\ @return\ returns\ the\ half\ height\n
comment11.params=actor
comment11.target=int\ getActorTop(greenfoot.Actor)
comment11.text=\n\ Calculate\ the\ top\ Y\ position\ of\ the\ actor\n\n\ @param\ actor\ An\ Actor\ class\ or\ an\ extend\ of\ it.\n\ @return\ return\ top\ Y\ actor\ position\n
comment12.params=actor
comment12.target=int\ getActorBottom(greenfoot.Actor)
comment12.text=\n\ Calculate\ the\ bottom\ Y\ position\ of\ the\ actor\n\n\ @param\ actor\ An\ Actor\ class\ or\ an\ extend\ of\ it.\n\ @return\ return\ bottom\ Y\ actor\ position\n
comment13.params=actor
comment13.target=int\ getActorLeft(greenfoot.Actor)
comment13.text=\n\ Calculate\ the\ left\ X\ position\ of\ the\ actor\n\n\ @param\ actor\ An\ Actor\ class\ or\ an\ extend\ of\ it.\n\ @return\ return\ left\ X\ actor\ position\n
comment14.params=actor
comment14.target=int\ getActorRight(greenfoot.Actor)
comment14.text=\n\ Calculate\ the\ right\ X\ position\ of\ the\ actor\n\n\ @param\ actor\ An\ Actor\ class\ or\ an\ extend\ of\ it.\n\ @return\ return\ right\ X\ actor\ position\n
comment2.params=mover
comment2.target=void\ addCollidingMover(Mover)
comment2.text=\n\ This\ methode\ lets\ you\ add\ a\ Mover\ that\ will\ be\ in\ this\ collision\ engine.\n\ When\ you\ add\ a\ mover\ it\ will\ collid\ with\ all\ the\ tiles\ in\ the\ world.\n\n\ @param\ mover\ A\ Mover\ class\ or\ a\ extend\ of\ it.\n
comment3.params=mover
comment3.target=void\ removeCollidingActor(Mover)
comment3.text=\n\ This\ methode\ will\ remove\ the\ Mover\ from\ the\ collision\ engine\n\n\ @param\ mover\ A\ Mover\ class\ or\ a\ extend\ of\ it.\n
comment4.params=
comment4.target=void\ update()
comment4.text=\n\ This\ methode\ must\ be\ called\ every\ update\ of\ the\ game.\ Else\ the\ collision\n\ will\ not\ apply\ correctly\n
comment5.params=mover
comment5.target=boolean\ detect(Mover)
comment5.text=\n\ This\ methode\ will\ detect\ if\ a\ Mover\ is\ overlapping\ with\ the\ tiles\n\n\ @param\ mover\ A\ Mover\ class\ or\ a\ extend\ of\ it.\n\ @return\ Returns\ true\ if\ the\ mover\ is\ overlapping\n
comment6.params=mover\ actorLeft\ actorRight\ actorTop\ actorBottom
comment6.target=boolean\ detect(Mover,\ int,\ int,\ int,\ int)
comment6.text=\n\ This\ methode\ will\ detect\ if\ a\ Mover\ is\ overlapping\ with\ the\ tiles\n\n\ @param\ mover\ A\ Mover\ class\ or\ a\ extend\ of\ it.\n\ @param\ actorLeft\ The\ far\ most\ left\ x\ position\ of\ the\ Mover.\n\ @param\ actorRight\ The\ far\ most\ right\ x\ position\ of\ the\ Mover.\n\ @param\ actorTop\ The\ far\ most\ top\ y\ position\ of\ the\ Mover.\n\ @param\ actorBottom\ The\ far\ most\ bottom\ y\ position\ of\ the\ Mover.\n\ @return\n
comment7.params=top\ left\ right\ bottom\ midX\ midY
comment7.target=java.util.List\ getCollidingTiles(int,\ int,\ int,\ int,\ int,\ int)
comment7.text=\n\ This\ methode\ will\ get\ all\ the\ tiles\ at\ the\ different\ x\ and\ y\ position\n\n\ @param\ top\ The\ far\ most\ top\ y\ position\n\ @param\ left\ The\ far\ most\ left\ x\ position\n\ @param\ right\ The\ far\ most\ right\ x\ position\n\ @param\ bottom\ The\ far\ most\ bottom\ y\ position\n\ @param\ midX\ The\ middle\ x\ position\n\ @param\ midY\ The\ middle\ y\ position\n\ @return\ Returns\ a\ list\ of\ tiles\ that\ are\ located\ on\ those\ positions.\n
comment8.params=mover\ tile
comment8.target=boolean\ resolve(Mover,\ Tile)
comment8.text=\n\ This\ methode\ will\ resolves\ the\ overlapping.\n\n\ @param\ mover\ A\ Mover\ class\ or\ a\ extend\ of\ it.\n\ @param\ tile\ A\ Tile\ class\ or\ a\ extend\ of\ it.\n\ @return\ Returns\ a\ true\ if\ the\ overlap\ was\ resolved.\n
comment9.params=actor
comment9.target=int\ getActorHalfWidth(greenfoot.Actor)
comment9.text=\n\ Calculate\ the\ half\ width\ of\ a\ Actor\n\n\ @param\ actor\ An\ Actor\ class\ or\ an\ extend\ of\ it.\n\ @return\ returns\ the\ half\ width\n
numComments=15
